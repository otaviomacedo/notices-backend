{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { spawnSync, SpawnSyncOptions } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface CallSite {\n  getThis(): any;\n  getTypeName(): string;\n  getFunctionName(): string;\n  getMethodName(): string;\n  getFileName(): string;\n  getLineNumber(): number;\n  getColumnNumber(): number;\n  getFunction(): Function;\n  getEvalOrigin(): string;\n  isNative(): boolean;\n  isToplevel(): boolean;\n  isEval(): boolean;\n  isConstructor(): boolean;\n}\n\n/**\n * Get callsites from the V8 stack trace API\n *\n * https://github.com/sindresorhus/callsites\n */\nexport function callsites(): CallSite[] {\n  const _prepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (_, stack) => stack;\n  const stack = new Error().stack?.slice(1);\n  Error.prepareStackTrace = _prepareStackTrace;\n  return stack as unknown as CallSite[];\n}\n\n/**\n * Find a file by walking up parent directories\n */\nexport function findUp(name: string, directory: string = process.cwd()): string | undefined {\n  return findUpMultiple([name], directory)[0];\n}\n\n/**\n * Find the lowest of multiple files by walking up parent directories. If\n * multiple files exist at the same level, they will all be returned.\n */\nexport function findUpMultiple(names: string[], directory: string = process.cwd()): string[] {\n  const absoluteDirectory = path.resolve(directory);\n\n  const files = [];\n  for (const name of names) {\n    const file = path.join(directory, name);\n    if (fs.existsSync(file)) {\n      files.push(file);\n    }\n  }\n\n  if (files.length > 0) {\n    return files;\n  }\n\n  const { root } = path.parse(absoluteDirectory);\n  if (absoluteDirectory === root) {\n    return [];\n  }\n\n  return findUpMultiple(names, path.dirname(absoluteDirectory));\n}\n\n/**\n * Spawn sync with error handling\n */\nexport function exec(cmd: string, args: string[], options?: SpawnSyncOptions) {\n  const proc = spawnSync(cmd, args, options);\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`[Status ${proc.status}] stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${cmd} ${args.join(' ')} ${options?.cwd ? `run in directory ${options.cwd}` : ''} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\n/**\n * Returns a module version by requiring its package.json file\n */\nexport function tryGetModuleVersionFromRequire(mod: string): string | undefined {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    return require(`${mod}/package.json`).version;\n  } catch (err) {\n    return undefined;\n  }\n}\n\n/**\n * Gets module version from package.json content\n */\nexport function tryGetModuleVersionFromPkg(mod: string, pkgJson: { [key: string]: any }, pkgPath: string): string | undefined {\n  const dependencies = {\n    ...pkgJson.dependencies ?? {},\n    ...pkgJson.devDependencies ?? {},\n    ...pkgJson.peerDependencies ?? {},\n  };\n\n  if (!dependencies[mod]) {\n    return undefined;\n  }\n\n  // If it's a \"file:\" version, make it absolute\n  const fileMatch = dependencies[mod].match(/file:(.+)/);\n  if (fileMatch && !path.isAbsolute(fileMatch[1])) {\n    const absoluteFilePath = path.join(path.dirname(pkgPath), fileMatch[1]);\n    return `file:${absoluteFilePath}`;\n  };\n\n  return dependencies[mod];\n}\n\n/**\n * Extract versions for a list of modules.\n *\n * First lookup the version in the package.json and then fallback to requiring\n * the module's package.json. The fallback is needed for transitive dependencies.\n */\nexport function extractDependencies(pkgPath: string, modules: string[]): { [key: string]: string } {\n  const dependencies: { [key: string]: string } = {};\n\n  // Use require for cache\n  const pkgJson = require(pkgPath); // eslint-disable-line @typescript-eslint/no-require-imports\n\n  for (const mod of modules) {\n    const version = tryGetModuleVersionFromPkg(mod, pkgJson, pkgPath)\n      ?? tryGetModuleVersionFromRequire(mod);\n    if (!version) {\n      throw new Error(`Cannot extract version for module '${mod}'. Check that it's referenced in your package.json or installed.`);\n    }\n    dependencies[mod] = version;\n  }\n\n  return dependencies;\n}\n"],
  "mappings": "sPAAA,KAAA,iBAAA,QAAA,iBACA,GAAA,QAAA,MACA,KAAA,QAAA,QAuBA,oBAAyB,QACvB,KAAM,oBAAqB,MAAM,kBACjC,MAAM,kBAAoB,CAAC,EAAG,SAAU,OACxC,KAAM,OAAK,IAAG,GAAI,SAAQ,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,MAAM,GACvC,aAAM,kBAAoB,mBACnB,MALT,QAAA,UAAA,UAWA,gBAAuB,KAAc,UAAoB,QAAQ,MAAK,CACpE,MAAO,gBAAe,CAAC,MAAO,WAAW,GAD3C,QAAA,OAAA,OAQA,wBAA+B,MAAiB,UAAoB,QAAQ,MAAK,CAC/E,KAAM,mBAAoB,KAAK,QAAQ,WAEjC,MAAQ,GACd,SAAW,QAAQ,OAAO,CACxB,KAAM,MAAO,KAAK,KAAK,UAAW,MAClC,AAAI,GAAG,WAAW,OAChB,MAAM,KAAK,MAIf,GAAI,MAAM,OAAS,EACjB,MAAO,OAGT,KAAM,CAAE,MAAS,KAAK,MAAM,mBAC5B,MAAI,qBAAsB,KACjB,GAGF,eAAe,MAAO,KAAK,QAAQ,oBApB5C,QAAA,eAAA,eA0BA,cAAqB,IAAa,KAAgB,QAA0B,WAC1E,KAAM,MAAO,gBAAA,UAAU,IAAK,KAAM,SAElC,GAAI,KAAK,MACP,KAAM,MAAK,MAGb,GAAI,KAAK,SAAW,EAClB,KAAI,MAAK,QAAU,KAAK,OAChB,GAAI,OAAM,WAAW,KAAK,mBAAmB,IAAA,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,WAAW;;;UAAuB,IAAA,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,WAAW,UAEtH,GAAI,OAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,UAAO,KAAA,OAAP,QAAS,KAAM,oBAAoB,QAAQ,MAAQ,yBAAyB,KAAK,UAG/H,MAAO,MAdT,QAAA,KAAA,KAoBA,wCAA+C,IAAW,CACxD,GAAI,CAEF,MAAO,SAAQ,GAAG,oBAAoB,aACtC,CACA,QALJ,QAAA,+BAAA,+BAYA,oCAA2C,IAAa,QAAiC,QAAe,cACtG,KAAM,cAAe,IACnB,IAAG,QAAQ,gBAAY,MAAA,KAAA,OAAA,GAAI,MAC3B,IAAG,QAAQ,mBAAe,MAAA,KAAA,OAAA,GAAI,MAC9B,IAAG,QAAQ,oBAAgB,MAAA,KAAA,OAAA,GAAI,IAGjC,GAAI,CAAC,aAAa,KAChB,OAIF,KAAM,WAAY,aAAa,KAAK,MAAM,aAC1C,MAAI,YAAa,CAAC,KAAK,WAAW,UAAU,IAEnC,QADkB,KAAK,KAAK,KAAK,QAAQ,SAAU,UAAU,MAI/D,aAAa,KAlBtB,QAAA,2BAAA,2BA2BA,6BAAoC,QAAiB,QAAiB,QACpE,KAAM,cAA0C,GAG1C,QAAU,QAAQ,SAExB,SAAW,OAAO,SAAS,CACzB,KAAM,SAAO,IAAG,2BAA2B,IAAK,QAAS,YAAQ,MAAA,KAAA,OAAA,GAC5D,+BAA+B,KACpC,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,sCAAsC,uEAExD,aAAa,KAAO,QAGtB,MAAO,cAfT,QAAA,oBAAA",
  "names": []
}
