{
  "version": 3,
  "sources": ["lightsail.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-13T16:50:48.951Z\",\"fingerprint\":\"/CT+wiACZ6e0gQxQAiyrqRjMsGHBSkVA9jdMHcn8Lvc=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnDatabaseProps {\n\nn    readonly masterDatabaseName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly masterUsername: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly relationalDatabaseBlueprintId: string;\n\n                                                                                                                                                                                                                                                            \n    readonly relationalDatabaseBundleId: string;\n\n                                                                                                                                                                                                                     \n    readonly relationalDatabaseName: string;\n\n                                                                                                                                                                                                                             \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly backupRetention?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly caCertificateIdentifier?: string;\n\nn    readonly masterUserPassword?: string;\n\n                                                                                                                                                                                                                                                                                                          \n    readonly preferredBackupWindow?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly publiclyAccessible?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly relationalDatabaseParameters?: Array<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly rotateMasterUserPassword?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDatabaseProps`\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabasePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('backupRetention', cdk.validateBoolean)(properties.backupRetention));\n    errors.collect(cdk.propertyValidator('caCertificateIdentifier', cdk.validateString)(properties.caCertificateIdentifier));\n    errors.collect(cdk.propertyValidator('masterDatabaseName', cdk.requiredValidator)(properties.masterDatabaseName));\n    errors.collect(cdk.propertyValidator('masterDatabaseName', cdk.validateString)(properties.masterDatabaseName));\n    errors.collect(cdk.propertyValidator('masterUserPassword', cdk.validateString)(properties.masterUserPassword));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.requiredValidator)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.validateString)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('preferredBackupWindow', cdk.validateString)(properties.preferredBackupWindow));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.validateBoolean)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBlueprintId', cdk.requiredValidator)(properties.relationalDatabaseBlueprintId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBlueprintId', cdk.validateString)(properties.relationalDatabaseBlueprintId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBundleId', cdk.requiredValidator)(properties.relationalDatabaseBundleId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBundleId', cdk.validateString)(properties.relationalDatabaseBundleId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseName', cdk.requiredValidator)(properties.relationalDatabaseName));\n    errors.collect(cdk.propertyValidator('relationalDatabaseName', cdk.validateString)(properties.relationalDatabaseName));\n    errors.collect(cdk.propertyValidator('relationalDatabaseParameters', cdk.listValidator(CfnDatabase_RelationalDatabaseParameterPropertyValidator))(properties.relationalDatabaseParameters));\n    errors.collect(cdk.propertyValidator('rotateMasterUserPassword', cdk.validateBoolean)(properties.rotateMasterUserPassword));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDatabaseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Database` resource\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Database` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabasePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabasePropsValidator(properties).assertSuccess();\n    return {\n        MasterDatabaseName: cdk.stringToCloudFormation(properties.masterDatabaseName),\n        MasterUsername: cdk.stringToCloudFormation(properties.masterUsername),\n        RelationalDatabaseBlueprintId: cdk.stringToCloudFormation(properties.relationalDatabaseBlueprintId),\n        RelationalDatabaseBundleId: cdk.stringToCloudFormation(properties.relationalDatabaseBundleId),\n        RelationalDatabaseName: cdk.stringToCloudFormation(properties.relationalDatabaseName),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        BackupRetention: cdk.booleanToCloudFormation(properties.backupRetention),\n        CaCertificateIdentifier: cdk.stringToCloudFormation(properties.caCertificateIdentifier),\n        MasterUserPassword: cdk.stringToCloudFormation(properties.masterUserPassword),\n        PreferredBackupWindow: cdk.stringToCloudFormation(properties.preferredBackupWindow),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        PubliclyAccessible: cdk.booleanToCloudFormation(properties.publiclyAccessible),\n        RelationalDatabaseParameters: cdk.listMapper(cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation)(properties.relationalDatabaseParameters),\n        RotateMasterUserPassword: cdk.booleanToCloudFormation(properties.rotateMasterUserPassword),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabasePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabaseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabaseProps>();\n    ret.addPropertyResult('masterDatabaseName', 'MasterDatabaseName', cfn_parse.FromCloudFormation.getString(properties.MasterDatabaseName));\n    ret.addPropertyResult('masterUsername', 'MasterUsername', cfn_parse.FromCloudFormation.getString(properties.MasterUsername));\n    ret.addPropertyResult('relationalDatabaseBlueprintId', 'RelationalDatabaseBlueprintId', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBlueprintId));\n    ret.addPropertyResult('relationalDatabaseBundleId', 'RelationalDatabaseBundleId', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBundleId));\n    ret.addPropertyResult('relationalDatabaseName', 'RelationalDatabaseName', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseName));\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('backupRetention', 'BackupRetention', properties.BackupRetention != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BackupRetention) : undefined);\n    ret.addPropertyResult('caCertificateIdentifier', 'CaCertificateIdentifier', properties.CaCertificateIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.CaCertificateIdentifier) : undefined);\n    ret.addPropertyResult('masterUserPassword', 'MasterUserPassword', properties.MasterUserPassword != null ? cfn_parse.FromCloudFormation.getString(properties.MasterUserPassword) : undefined);\n    ret.addPropertyResult('preferredBackupWindow', 'PreferredBackupWindow', properties.PreferredBackupWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredBackupWindow) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('publiclyAccessible', 'PubliclyAccessible', properties.PubliclyAccessible != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible) : undefined);\n    ret.addPropertyResult('relationalDatabaseParameters', 'RelationalDatabaseParameters', properties.RelationalDatabaseParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation)(properties.RelationalDatabaseParameters) : undefined);\n    ret.addPropertyResult('rotateMasterUserPassword', 'RotateMasterUserPassword', properties.RotateMasterUserPassword != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RotateMasterUserPassword) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                         \nexport class CfnDatabase extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Database\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDatabase {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDatabasePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDatabase(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                     \n    public readonly attrDatabaseArn: string;\n\nn    public masterDatabaseName: string;\n\nn    public masterUsername: string;\n\n                                                                                                                                                                                                                                                                 \n    public relationalDatabaseBlueprintId: string;\n\n                                                                                                                                                                                                                                                            \n    public relationalDatabaseBundleId: string;\n\n                                                                                                                                                                                                                     \n    public relationalDatabaseName: string;\n\n                                                                                                                                                                                                                             \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public backupRetention: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public caCertificateIdentifier: string | undefined;\n\nn    public masterUserPassword: string | undefined;\n\n                                                                                                                                                                                                                                                                                                          \n    public preferredBackupWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public preferredMaintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public publiclyAccessible: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public relationalDatabaseParameters: Array<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public rotateMasterUserPassword: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDatabaseProps) {\n        super(scope, id, { type: CfnDatabase.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'masterDatabaseName', this);\n        cdk.requireProperty(props, 'masterUsername', this);\n        cdk.requireProperty(props, 'relationalDatabaseBlueprintId', this);\n        cdk.requireProperty(props, 'relationalDatabaseBundleId', this);\n        cdk.requireProperty(props, 'relationalDatabaseName', this);\n        this.attrDatabaseArn = cdk.Token.asString(this.getAtt('DatabaseArn'));\n\n        this.masterDatabaseName = props.masterDatabaseName;\n        this.masterUsername = props.masterUsername;\n        this.relationalDatabaseBlueprintId = props.relationalDatabaseBlueprintId;\n        this.relationalDatabaseBundleId = props.relationalDatabaseBundleId;\n        this.relationalDatabaseName = props.relationalDatabaseName;\n        this.availabilityZone = props.availabilityZone;\n        this.backupRetention = props.backupRetention;\n        this.caCertificateIdentifier = props.caCertificateIdentifier;\n        this.masterUserPassword = props.masterUserPassword;\n        this.preferredBackupWindow = props.preferredBackupWindow;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.publiclyAccessible = props.publiclyAccessible;\n        this.relationalDatabaseParameters = props.relationalDatabaseParameters;\n        this.rotateMasterUserPassword = props.rotateMasterUserPassword;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Database\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDatabase.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            masterDatabaseName: this.masterDatabaseName,\n            masterUsername: this.masterUsername,\n            relationalDatabaseBlueprintId: this.relationalDatabaseBlueprintId,\n            relationalDatabaseBundleId: this.relationalDatabaseBundleId,\n            relationalDatabaseName: this.relationalDatabaseName,\n            availabilityZone: this.availabilityZone,\n            backupRetention: this.backupRetention,\n            caCertificateIdentifier: this.caCertificateIdentifier,\n            masterUserPassword: this.masterUserPassword,\n            preferredBackupWindow: this.preferredBackupWindow,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            publiclyAccessible: this.publiclyAccessible,\n            relationalDatabaseParameters: this.relationalDatabaseParameters,\n            rotateMasterUserPassword: this.rotateMasterUserPassword,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDatabasePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface RelationalDatabaseParameterProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly allowedValues?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly applyMethod?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly applyType?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly dataType?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly isModifiable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly parameterName?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly parameterValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RelationalDatabaseParameterProperty`\n *\n * @param properties - the TypeScript properties of a `RelationalDatabaseParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedValues', cdk.validateString)(properties.allowedValues));\n    errors.collect(cdk.propertyValidator('applyMethod', cdk.validateString)(properties.applyMethod));\n    errors.collect(cdk.propertyValidator('applyType', cdk.validateString)(properties.applyType));\n    errors.collect(cdk.propertyValidator('dataType', cdk.validateString)(properties.dataType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('isModifiable', cdk.validateBoolean)(properties.isModifiable));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"RelationalDatabaseParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Database.RelationalDatabaseParameter` resource\n *\n * @param properties - the TypeScript properties of a `RelationalDatabaseParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Database.RelationalDatabaseParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedValues: cdk.stringToCloudFormation(properties.allowedValues),\n        ApplyMethod: cdk.stringToCloudFormation(properties.applyMethod),\n        ApplyType: cdk.stringToCloudFormation(properties.applyType),\n        DataType: cdk.stringToCloudFormation(properties.dataType),\n        Description: cdk.stringToCloudFormation(properties.description),\n        IsModifiable: cdk.booleanToCloudFormation(properties.isModifiable),\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.RelationalDatabaseParameterProperty>();\n    ret.addPropertyResult('allowedValues', 'AllowedValues', properties.AllowedValues != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedValues) : undefined);\n    ret.addPropertyResult('applyMethod', 'ApplyMethod', properties.ApplyMethod != null ? cfn_parse.FromCloudFormation.getString(properties.ApplyMethod) : undefined);\n    ret.addPropertyResult('applyType', 'ApplyType', properties.ApplyType != null ? cfn_parse.FromCloudFormation.getString(properties.ApplyType) : undefined);\n    ret.addPropertyResult('dataType', 'DataType', properties.DataType != null ? cfn_parse.FromCloudFormation.getString(properties.DataType) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('isModifiable', 'IsModifiable', properties.IsModifiable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsModifiable) : undefined);\n    ret.addPropertyResult('parameterName', 'ParameterName', properties.ParameterName != null ? cfn_parse.FromCloudFormation.getString(properties.ParameterName) : undefined);\n    ret.addPropertyResult('parameterValue', 'ParameterValue', properties.ParameterValue != null ? cfn_parse.FromCloudFormation.getString(properties.ParameterValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                              \nexport interface CfnDiskProps {\n\n                                                                                                                                                                                           \n    readonly diskName: string;\n\n                                                                                                                                                                                                 \n    readonly sizeInGb: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly addOns?: Array<CfnDisk.AddOnProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDiskProps`\n *\n * @param properties - the TypeScript properties of a `CfnDiskProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDiskPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOns', cdk.listValidator(CfnDisk_AddOnPropertyValidator))(properties.addOns));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('diskName', cdk.requiredValidator)(properties.diskName));\n    errors.collect(cdk.propertyValidator('diskName', cdk.validateString)(properties.diskName));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.requiredValidator)(properties.sizeInGb));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.validateNumber)(properties.sizeInGb));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDiskProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk` resource\n *\n * @param properties - the TypeScript properties of a `CfnDiskProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDiskPropsValidator(properties).assertSuccess();\n    return {\n        DiskName: cdk.stringToCloudFormation(properties.diskName),\n        SizeInGb: cdk.numberToCloudFormation(properties.sizeInGb),\n        AddOns: cdk.listMapper(cfnDiskAddOnPropertyToCloudFormation)(properties.addOns),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDiskProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDiskProps>();\n    ret.addPropertyResult('diskName', 'DiskName', cfn_parse.FromCloudFormation.getString(properties.DiskName));\n    ret.addPropertyResult('sizeInGb', 'SizeInGb', cfn_parse.FromCloudFormation.getNumber(properties.SizeInGb));\n    ret.addPropertyResult('addOns', 'AddOns', properties.AddOns != null ? cfn_parse.FromCloudFormation.getArray(CfnDiskAddOnPropertyFromCloudFormation)(properties.AddOns) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnDisk extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Disk\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDisk {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDiskPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDisk(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                             \n    public readonly attrAttachedTo: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrAttachmentState: string;\n\n                                                                                                          \n    public readonly attrDiskArn: string;\n\n                                                                                                                      \n    public readonly attrIops: number;\n\n                                                                                                                                         \n    public readonly attrIsAttached: cdk.IResolvable;\n\n                                                                                 \n    public readonly attrPath: string;\n\n                                                                                                                         \n    public readonly attrResourceType: string;\n\n                                                                                                            \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public readonly attrSupportCode: string;\n\n                                                                                                                                                                                           \n    public diskName: string;\n\n                                                                                                                                                                                                 \n    public sizeInGb: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public addOns: Array<CfnDisk.AddOnProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnDiskProps) {\n        super(scope, id, { type: CfnDisk.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'diskName', this);\n        cdk.requireProperty(props, 'sizeInGb', this);\n        this.attrAttachedTo = cdk.Token.asString(this.getAtt('AttachedTo'));\n        this.attrAttachmentState = cdk.Token.asString(this.getAtt('AttachmentState'));\n        this.attrDiskArn = cdk.Token.asString(this.getAtt('DiskArn'));\n        this.attrIops = cdk.Token.asNumber(this.getAtt('Iops'));\n        this.attrIsAttached = this.getAtt('IsAttached');\n        this.attrPath = cdk.Token.asString(this.getAtt('Path'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrSupportCode = cdk.Token.asString(this.getAtt('SupportCode'));\n\n        this.diskName = props.diskName;\n        this.sizeInGb = props.sizeInGb;\n        this.addOns = props.addOns;\n        this.availabilityZone = props.availabilityZone;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Disk\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDisk.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            diskName: this.diskName,\n            sizeInGb: this.sizeInGb,\n            addOns: this.addOns,\n            availabilityZone: this.availabilityZone,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDiskPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDisk {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface AddOnProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly addOnType: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly autoSnapshotAddOnRequest?: CfnDisk.AutoSnapshotAddOnProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly status?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDisk_AddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOnType', cdk.requiredValidator)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('addOnType', cdk.validateString)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('autoSnapshotAddOnRequest', CfnDisk_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"AddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AddOn` resource\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDisk_AddOnPropertyValidator(properties).assertSuccess();\n    return {\n        AddOnType: cdk.stringToCloudFormation(properties.addOnType),\n        AutoSnapshotAddOnRequest: cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDisk.AddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDisk.AddOnProperty>();\n    ret.addPropertyResult('addOnType', 'AddOnType', cfn_parse.FromCloudFormation.getString(properties.AddOnType));\n    ret.addPropertyResult('autoSnapshotAddOnRequest', 'AutoSnapshotAddOnRequest', properties.AutoSnapshotAddOnRequest != null ? CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDisk {\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface AutoSnapshotAddOnProperty {\nn        readonly snapshotTimeOfDay?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoSnapshotAddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDisk_AutoSnapshotAddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snapshotTimeOfDay', cdk.validateString)(properties.snapshotTimeOfDay));\n    return errors.wrap('supplied properties not correct for \"AutoSnapshotAddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AutoSnapshotAddOn` resource\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AutoSnapshotAddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDisk_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess();\n    return {\n        SnapshotTimeOfDay: cdk.stringToCloudFormation(properties.snapshotTimeOfDay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDisk.AutoSnapshotAddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDisk.AutoSnapshotAddOnProperty>();\n    ret.addPropertyResult('snapshotTimeOfDay', 'SnapshotTimeOfDay', properties.SnapshotTimeOfDay != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnInstanceProps {\n\n                                                                                                                                                                                                                                                        \n    readonly blueprintId: string;\n\n                                                                                                                                                                                                                                         \n    readonly bundleId: string;\n\n                                                                                                                                                                                                           \n    readonly instanceName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly addOns?: Array<CfnInstance.AddOnProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly hardware?: CfnInstance.HardwareProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly keyPairName?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly networking?: CfnInstance.NetworkingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\nn    readonly userData?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInstanceProps`\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstancePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOns', cdk.listValidator(CfnInstance_AddOnPropertyValidator))(properties.addOns));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('blueprintId', cdk.requiredValidator)(properties.blueprintId));\n    errors.collect(cdk.propertyValidator('blueprintId', cdk.validateString)(properties.blueprintId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.requiredValidator)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.validateString)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('hardware', CfnInstance_HardwarePropertyValidator)(properties.hardware));\n    errors.collect(cdk.propertyValidator('instanceName', cdk.requiredValidator)(properties.instanceName));\n    errors.collect(cdk.propertyValidator('instanceName', cdk.validateString)(properties.instanceName));\n    errors.collect(cdk.propertyValidator('keyPairName', cdk.validateString)(properties.keyPairName));\n    errors.collect(cdk.propertyValidator('networking', CfnInstance_NetworkingPropertyValidator)(properties.networking));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));\n    return errors.wrap('supplied properties not correct for \"CfnInstanceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance` resource\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstancePropsValidator(properties).assertSuccess();\n    return {\n        BlueprintId: cdk.stringToCloudFormation(properties.blueprintId),\n        BundleId: cdk.stringToCloudFormation(properties.bundleId),\n        InstanceName: cdk.stringToCloudFormation(properties.instanceName),\n        AddOns: cdk.listMapper(cfnInstanceAddOnPropertyToCloudFormation)(properties.addOns),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Hardware: cfnInstanceHardwarePropertyToCloudFormation(properties.hardware),\n        KeyPairName: cdk.stringToCloudFormation(properties.keyPairName),\n        Networking: cfnInstanceNetworkingPropertyToCloudFormation(properties.networking),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserData: cdk.stringToCloudFormation(properties.userData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstanceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstanceProps>();\n    ret.addPropertyResult('blueprintId', 'BlueprintId', cfn_parse.FromCloudFormation.getString(properties.BlueprintId));\n    ret.addPropertyResult('bundleId', 'BundleId', cfn_parse.FromCloudFormation.getString(properties.BundleId));\n    ret.addPropertyResult('instanceName', 'InstanceName', cfn_parse.FromCloudFormation.getString(properties.InstanceName));\n    ret.addPropertyResult('addOns', 'AddOns', properties.AddOns != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceAddOnPropertyFromCloudFormation)(properties.AddOns) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('hardware', 'Hardware', properties.Hardware != null ? CfnInstanceHardwarePropertyFromCloudFormation(properties.Hardware) : undefined);\n    ret.addPropertyResult('keyPairName', 'KeyPairName', properties.KeyPairName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyPairName) : undefined);\n    ret.addPropertyResult('networking', 'Networking', properties.Networking != null ? CfnInstanceNetworkingPropertyFromCloudFormation(properties.Networking) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userData', 'UserData', properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                         \nexport class CfnInstance extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Instance\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInstance {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInstancePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInstance(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                              \n    public readonly attrHardwareCpuCount: number;\n\n                                                                                                                                          \n    public readonly attrHardwareRamSizeInGb: number;\n\n                                                                                                                                                                                                                           \n    public readonly attrInstanceArn: string;\n\n                                                                                                                                                 \n    public readonly attrIsStaticIp: cdk.IResolvable;\n\n                                                                                                                                                    \n    public readonly attrLocationAvailabilityZone: string;\n\n                                                                                                          \n    public readonly attrLocationRegionName: string;\n\n                                                                                                                                                                            \n    public readonly attrNetworkingMonthlyTransferGbPerMonthAllocated: string;\n\n                                                                                                               \n    public readonly attrPrivateIpAddress: string;\n\n                                                                                                             \n    public readonly attrPublicIpAddress: string;\n\n                                                                                                                                 \n    public readonly attrResourceType: string;\n\n                                                                                                                    \n    public readonly attrSshKeyName: string;\n\n                                                                                                  \n    public readonly attrStateCode: number;\n\n                                                                                                                                   \n    public readonly attrStateName: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    public readonly attrSupportCode: string;\n\n                                                                                                                                        \n    public readonly attrUserName: string;\n\n                                                                                                                                                                                                                                                        \n    public blueprintId: string;\n\n                                                                                                                                                                                                                                         \n    public bundleId: string;\n\n                                                                                                                                                                                                           \n    public instanceName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public addOns: Array<CfnInstance.AddOnProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public hardware: CfnInstance.HardwareProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public keyPairName: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public networking: CfnInstance.NetworkingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\nn    public userData: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnInstanceProps) {\n        super(scope, id, { type: CfnInstance.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'blueprintId', this);\n        cdk.requireProperty(props, 'bundleId', this);\n        cdk.requireProperty(props, 'instanceName', this);\n        this.attrHardwareCpuCount = cdk.Token.asNumber(this.getAtt('Hardware.CpuCount'));\n        this.attrHardwareRamSizeInGb = cdk.Token.asNumber(this.getAtt('Hardware.RamSizeInGb'));\n        this.attrInstanceArn = cdk.Token.asString(this.getAtt('InstanceArn'));\n        this.attrIsStaticIp = this.getAtt('IsStaticIp');\n        this.attrLocationAvailabilityZone = cdk.Token.asString(this.getAtt('Location.AvailabilityZone'));\n        this.attrLocationRegionName = cdk.Token.asString(this.getAtt('Location.RegionName'));\n        this.attrNetworkingMonthlyTransferGbPerMonthAllocated = cdk.Token.asString(this.getAtt('Networking.MonthlyTransfer.GbPerMonthAllocated'));\n        this.attrPrivateIpAddress = cdk.Token.asString(this.getAtt('PrivateIpAddress'));\n        this.attrPublicIpAddress = cdk.Token.asString(this.getAtt('PublicIpAddress'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrSshKeyName = cdk.Token.asString(this.getAtt('SshKeyName'));\n        this.attrStateCode = cdk.Token.asNumber(this.getAtt('State.Code'));\n        this.attrStateName = cdk.Token.asString(this.getAtt('State.Name'));\n        this.attrSupportCode = cdk.Token.asString(this.getAtt('SupportCode'));\n        this.attrUserName = cdk.Token.asString(this.getAtt('UserName'));\n\n        this.blueprintId = props.blueprintId;\n        this.bundleId = props.bundleId;\n        this.instanceName = props.instanceName;\n        this.addOns = props.addOns;\n        this.availabilityZone = props.availabilityZone;\n        this.hardware = props.hardware;\n        this.keyPairName = props.keyPairName;\n        this.networking = props.networking;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Instance\", props.tags, { tagPropertyName: 'tags' });\n        this.userData = props.userData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInstance.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            blueprintId: this.blueprintId,\n            bundleId: this.bundleId,\n            instanceName: this.instanceName,\n            addOns: this.addOns,\n            availabilityZone: this.availabilityZone,\n            hardware: this.hardware,\n            keyPairName: this.keyPairName,\n            networking: this.networking,\n            tags: this.tags.renderTags(),\n            userData: this.userData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInstancePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface AddOnProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly addOnType: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly autoSnapshotAddOnRequest?: CfnInstance.AutoSnapshotAddOnProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly status?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_AddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOnType', cdk.requiredValidator)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('addOnType', cdk.validateString)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('autoSnapshotAddOnRequest', CfnInstance_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"AddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AddOn` resource\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_AddOnPropertyValidator(properties).assertSuccess();\n    return {\n        AddOnType: cdk.stringToCloudFormation(properties.addOnType),\n        AutoSnapshotAddOnRequest: cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.AddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.AddOnProperty>();\n    ret.addPropertyResult('addOnType', 'AddOnType', cfn_parse.FromCloudFormation.getString(properties.AddOnType));\n    ret.addPropertyResult('autoSnapshotAddOnRequest', 'AutoSnapshotAddOnRequest', properties.AutoSnapshotAddOnRequest != null ? CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface AutoSnapshotAddOnProperty {\nn        readonly snapshotTimeOfDay?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoSnapshotAddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_AutoSnapshotAddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snapshotTimeOfDay', cdk.validateString)(properties.snapshotTimeOfDay));\n    return errors.wrap('supplied properties not correct for \"AutoSnapshotAddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AutoSnapshotAddOn` resource\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AutoSnapshotAddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess();\n    return {\n        SnapshotTimeOfDay: cdk.stringToCloudFormation(properties.snapshotTimeOfDay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.AutoSnapshotAddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.AutoSnapshotAddOnProperty>();\n    ret.addPropertyResult('snapshotTimeOfDay', 'SnapshotTimeOfDay', properties.SnapshotTimeOfDay != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface DiskProperty {\n                                                                                                                                                                                                                                                            \n        readonly attachedTo?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly attachmentState?: string;\n                                                                                                                                                                                                                                          \n        readonly diskName: string;\n                                                                                                                                                                                                                                                                    \n        readonly iops?: number;\n                                                                                                                                                                                                                                                                                                                       \n        readonly isSystemDisk?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                        \n        readonly path: string;\n                                                                                                                                                                                                                                         \n        readonly sizeInGb?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DiskProperty`\n *\n * @param properties - the TypeScript properties of a `DiskProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_DiskPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachedTo', cdk.validateString)(properties.attachedTo));\n    errors.collect(cdk.propertyValidator('attachmentState', cdk.validateString)(properties.attachmentState));\n    errors.collect(cdk.propertyValidator('diskName', cdk.requiredValidator)(properties.diskName));\n    errors.collect(cdk.propertyValidator('diskName', cdk.validateString)(properties.diskName));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('isSystemDisk', cdk.validateBoolean)(properties.isSystemDisk));\n    errors.collect(cdk.propertyValidator('path', cdk.requiredValidator)(properties.path));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.validateString)(properties.sizeInGb));\n    return errors.wrap('supplied properties not correct for \"DiskProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Disk` resource\n *\n * @param properties - the TypeScript properties of a `DiskProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Disk` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceDiskPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_DiskPropertyValidator(properties).assertSuccess();\n    return {\n        AttachedTo: cdk.stringToCloudFormation(properties.attachedTo),\n        AttachmentState: cdk.stringToCloudFormation(properties.attachmentState),\n        DiskName: cdk.stringToCloudFormation(properties.diskName),\n        IOPS: cdk.numberToCloudFormation(properties.iops),\n        IsSystemDisk: cdk.booleanToCloudFormation(properties.isSystemDisk),\n        Path: cdk.stringToCloudFormation(properties.path),\n        SizeInGb: cdk.stringToCloudFormation(properties.sizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceDiskPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.DiskProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.DiskProperty>();\n    ret.addPropertyResult('attachedTo', 'AttachedTo', properties.AttachedTo != null ? cfn_parse.FromCloudFormation.getString(properties.AttachedTo) : undefined);\n    ret.addPropertyResult('attachmentState', 'AttachmentState', properties.AttachmentState != null ? cfn_parse.FromCloudFormation.getString(properties.AttachmentState) : undefined);\n    ret.addPropertyResult('diskName', 'DiskName', cfn_parse.FromCloudFormation.getString(properties.DiskName));\n    ret.addPropertyResult('iops', 'IOPS', properties.IOPS != null ? cfn_parse.FromCloudFormation.getNumber(properties.IOPS) : undefined);\n    ret.addPropertyResult('isSystemDisk', 'IsSystemDisk', properties.IsSystemDisk != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsSystemDisk) : undefined);\n    ret.addPropertyResult('path', 'Path', cfn_parse.FromCloudFormation.getString(properties.Path));\n    ret.addPropertyResult('sizeInGb', 'SizeInGb', properties.SizeInGb != null ? cfn_parse.FromCloudFormation.getString(properties.SizeInGb) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface HardwareProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly cpuCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly disks?: Array<CfnInstance.DiskProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly ramSizeInGb?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HardwareProperty`\n *\n * @param properties - the TypeScript properties of a `HardwareProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_HardwarePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpuCount', cdk.validateNumber)(properties.cpuCount));\n    errors.collect(cdk.propertyValidator('disks', cdk.listValidator(CfnInstance_DiskPropertyValidator))(properties.disks));\n    errors.collect(cdk.propertyValidator('ramSizeInGb', cdk.validateNumber)(properties.ramSizeInGb));\n    return errors.wrap('supplied properties not correct for \"HardwareProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Hardware` resource\n *\n * @param properties - the TypeScript properties of a `HardwareProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Hardware` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceHardwarePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_HardwarePropertyValidator(properties).assertSuccess();\n    return {\n        CpuCount: cdk.numberToCloudFormation(properties.cpuCount),\n        Disks: cdk.listMapper(cfnInstanceDiskPropertyToCloudFormation)(properties.disks),\n        RamSizeInGb: cdk.numberToCloudFormation(properties.ramSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceHardwarePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.HardwareProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.HardwareProperty>();\n    ret.addPropertyResult('cpuCount', 'CpuCount', properties.CpuCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CpuCount) : undefined);\n    ret.addPropertyResult('disks', 'Disks', properties.Disks != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceDiskPropertyFromCloudFormation)(properties.Disks) : undefined);\n    ret.addPropertyResult('ramSizeInGb', 'RamSizeInGb', properties.RamSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.RamSizeInGb) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface LocationProperty {\n                                                                                                                                                                                                                                                                     \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                    \n        readonly regionName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('regionName', cdk.validateString)(properties.regionName));\n    return errors.wrap('supplied properties not correct for \"LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Location` resource\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_LocationPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        RegionName: cdk.stringToCloudFormation(properties.regionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.LocationProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('regionName', 'RegionName', properties.RegionName != null ? cfn_parse.FromCloudFormation.getString(properties.RegionName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface MonthlyTransferProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly gbPerMonthAllocated?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonthlyTransferProperty`\n *\n * @param properties - the TypeScript properties of a `MonthlyTransferProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_MonthlyTransferPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gbPerMonthAllocated', cdk.validateString)(properties.gbPerMonthAllocated));\n    return errors.wrap('supplied properties not correct for \"MonthlyTransferProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.MonthlyTransfer` resource\n *\n * @param properties - the TypeScript properties of a `MonthlyTransferProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.MonthlyTransfer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceMonthlyTransferPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_MonthlyTransferPropertyValidator(properties).assertSuccess();\n    return {\n        GbPerMonthAllocated: cdk.stringToCloudFormation(properties.gbPerMonthAllocated),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceMonthlyTransferPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.MonthlyTransferProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.MonthlyTransferProperty>();\n    ret.addPropertyResult('gbPerMonthAllocated', 'GbPerMonthAllocated', properties.GbPerMonthAllocated != null ? cfn_parse.FromCloudFormation.getString(properties.GbPerMonthAllocated) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface NetworkingProperty {\n                                                                                                         \n        readonly monthlyTransfer?: number;\n                                                                                                                                                                                                                                                                 \n        readonly ports: Array<CfnInstance.PortProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkingProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_NetworkingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('monthlyTransfer', cdk.validateNumber)(properties.monthlyTransfer));\n    errors.collect(cdk.propertyValidator('ports', cdk.requiredValidator)(properties.ports));\n    errors.collect(cdk.propertyValidator('ports', cdk.listValidator(CfnInstance_PortPropertyValidator))(properties.ports));\n    return errors.wrap('supplied properties not correct for \"NetworkingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Networking` resource\n *\n * @param properties - the TypeScript properties of a `NetworkingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Networking` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceNetworkingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_NetworkingPropertyValidator(properties).assertSuccess();\n    return {\n        MonthlyTransfer: cdk.numberToCloudFormation(properties.monthlyTransfer),\n        Ports: cdk.listMapper(cfnInstancePortPropertyToCloudFormation)(properties.ports),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceNetworkingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.NetworkingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.NetworkingProperty>();\n    ret.addPropertyResult('monthlyTransfer', 'MonthlyTransfer', properties.MonthlyTransfer != null ? cfn_parse.FromCloudFormation.getNumber(properties.MonthlyTransfer) : undefined);\n    ret.addPropertyResult('ports', 'Ports', cfn_parse.FromCloudFormation.getArray(CfnInstancePortPropertyFromCloudFormation)(properties.Ports));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface PortProperty {\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly accessDirection?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly accessFrom?: string;\n                                                                                                                                                                                                                                                             \n        readonly accessType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly cidrListAliases?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly cidrs?: string[];\n                                                                                                                                                                                                                                                        \n        readonly commonName?: string;\nn        readonly fromPort?: number;\nn        readonly ipv6Cidrs?: string[];\nn        readonly protocol?: string;\nn        readonly toPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortProperty`\n *\n * @param properties - the TypeScript properties of a `PortProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_PortPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessDirection', cdk.validateString)(properties.accessDirection));\n    errors.collect(cdk.propertyValidator('accessFrom', cdk.validateString)(properties.accessFrom));\n    errors.collect(cdk.propertyValidator('accessType', cdk.validateString)(properties.accessType));\n    errors.collect(cdk.propertyValidator('cidrListAliases', cdk.listValidator(cdk.validateString))(properties.cidrListAliases));\n    errors.collect(cdk.propertyValidator('cidrs', cdk.listValidator(cdk.validateString))(properties.cidrs));\n    errors.collect(cdk.propertyValidator('commonName', cdk.validateString)(properties.commonName));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('ipv6Cidrs', cdk.listValidator(cdk.validateString))(properties.ipv6Cidrs));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"PortProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Port` resource\n *\n * @param properties - the TypeScript properties of a `PortProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Port` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePortPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_PortPropertyValidator(properties).assertSuccess();\n    return {\n        AccessDirection: cdk.stringToCloudFormation(properties.accessDirection),\n        AccessFrom: cdk.stringToCloudFormation(properties.accessFrom),\n        AccessType: cdk.stringToCloudFormation(properties.accessType),\n        CidrListAliases: cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrListAliases),\n        Cidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrs),\n        CommonName: cdk.stringToCloudFormation(properties.commonName),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        Ipv6Cidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.ipv6Cidrs),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePortPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.PortProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.PortProperty>();\n    ret.addPropertyResult('accessDirection', 'AccessDirection', properties.AccessDirection != null ? cfn_parse.FromCloudFormation.getString(properties.AccessDirection) : undefined);\n    ret.addPropertyResult('accessFrom', 'AccessFrom', properties.AccessFrom != null ? cfn_parse.FromCloudFormation.getString(properties.AccessFrom) : undefined);\n    ret.addPropertyResult('accessType', 'AccessType', properties.AccessType != null ? cfn_parse.FromCloudFormation.getString(properties.AccessType) : undefined);\n    ret.addPropertyResult('cidrListAliases', 'CidrListAliases', properties.CidrListAliases != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CidrListAliases) : undefined);\n    ret.addPropertyResult('cidrs', 'Cidrs', properties.Cidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Cidrs) : undefined);\n    ret.addPropertyResult('commonName', 'CommonName', properties.CommonName != null ? cfn_parse.FromCloudFormation.getString(properties.CommonName) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('ipv6Cidrs', 'Ipv6Cidrs', properties.Ipv6Cidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Ipv6Cidrs) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface StateProperty {\n                                                                                                                                                                                                                                            \n        readonly code?: number;\n                                                                                                                                                                                                                                                                             \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StateProperty`\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_StatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('code', cdk.validateNumber)(properties.code));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"StateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.State` resource\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.State` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceStatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_StatePropertyValidator(properties).assertSuccess();\n    return {\n        Code: cdk.numberToCloudFormation(properties.code),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceStatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.StateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.StateProperty>();\n    ret.addPropertyResult('code', 'Code', properties.Code != null ? cfn_parse.FromCloudFormation.getNumber(properties.Code) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnStaticIpProps {\n\n                                                                                                                                                                                                            \n    readonly staticIpName: string;\n\n                                                                                                                                                                                                                               \n    readonly attachedTo?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStaticIpProps`\n *\n * @param properties - the TypeScript properties of a `CfnStaticIpProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStaticIpPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachedTo', cdk.validateString)(properties.attachedTo));\n    errors.collect(cdk.propertyValidator('staticIpName', cdk.requiredValidator)(properties.staticIpName));\n    errors.collect(cdk.propertyValidator('staticIpName', cdk.validateString)(properties.staticIpName));\n    return errors.wrap('supplied properties not correct for \"CfnStaticIpProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::StaticIp` resource\n *\n * @param properties - the TypeScript properties of a `CfnStaticIpProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::StaticIp` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStaticIpPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStaticIpPropsValidator(properties).assertSuccess();\n    return {\n        StaticIpName: cdk.stringToCloudFormation(properties.staticIpName),\n        AttachedTo: cdk.stringToCloudFormation(properties.attachedTo),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStaticIpPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStaticIpProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStaticIpProps>();\n    ret.addPropertyResult('staticIpName', 'StaticIpName', cfn_parse.FromCloudFormation.getString(properties.StaticIpName));\n    ret.addPropertyResult('attachedTo', 'AttachedTo', properties.AttachedTo != null ? cfn_parse.FromCloudFormation.getString(properties.AttachedTo) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnStaticIp extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::StaticIp\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStaticIp {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStaticIpPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStaticIp(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                 \n    public readonly attrIpAddress: string;\n\n                                                                                                                                              \n    public readonly attrIsAttached: cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    public readonly attrStaticIpArn: string;\n\n                                                                                                                                                                                                            \n    public staticIpName: string;\n\n                                                                                                                                                                                                                               \n    public attachedTo: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnStaticIpProps) {\n        super(scope, id, { type: CfnStaticIp.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'staticIpName', this);\n        this.attrIpAddress = cdk.Token.asString(this.getAtt('IpAddress'));\n        this.attrIsAttached = this.getAtt('IsAttached');\n        this.attrStaticIpArn = cdk.Token.asString(this.getAtt('StaticIpArn'));\n\n        this.staticIpName = props.staticIpName;\n        this.attachedTo = props.attachedTo;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStaticIp.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            staticIpName: this.staticIpName,\n            attachedTo: this.attachedTo,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStaticIpPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
